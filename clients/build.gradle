apply plugin: 'org.springframework.boot'

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    // Corda dependencies.
    compile "$corda_release_group:corda-rpc:$corda_release_version"

    // CorDapp dependencies.
    compile project(":contracts")
    compile project(":workflows")
    compile("org.springframework.boot:spring-boot-starter-websocket:$spring_boot_version") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }
    compile "net.corda:corda-jackson:4.8.6"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    compile "org.apache.logging.log4j:log4j-web:${log4j_version}"
    compile "org.slf4j:jul-to-slf4j:$slf4j_version"
}

springBoot {
    mainClassName = "com.compliance.supervisoryauthority.Server"
}

/* The Client is the communication channel between the external and the node. This task will help you immediately
 * execute your rpc methods in the main method of the client.kt. You can somewhat see this as a quick test of making
 * RPC calls to your nodes.
 */
task runTestClient(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.compliance.Client'
    args 'localhost:10006', 'user1', 'test'
}

/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
task runSupervisoryAuthorityServer(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.compliance.supervisoryauthority.Starter'
    args '--server.port=10050', '--config.rpc.host=localhost', '--config.rpc.port=58779', '--config.rpc.username=user1', '--config.rpc.password=test'
}


/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
task runFinancialServiceProviderServer(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.compliance.financialserviceprovider.Starter'
    args '--server.port=10051', '--config.rpc.host=localhost', '--config.rpc.port=58780', '--config.rpc.username=user1', '--config.rpc.password=test'
}


/* This task will start the springboot server that connects to your node (via RPC connection). All of the http requests
 * are in the Controller file. You can leave the Server.kt and NodeRPCConnection.kt file untouched for your use.
 */
task runAuditorServer(type: JavaExec, dependsOn: assemble) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.compliance.auditor.Starter'
    args '--server.port=10052', '--config.rpc.host=localhost', '--config.rpc.port=49962', '--config.rpc.username=user1', '--config.rpc.password=test'
}
